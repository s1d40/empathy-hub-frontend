
2
Empathy Hub App: Development Framework & MVP Blueprint 
Version: 0.1 
Last Updated: May 6, 2025 
1. Introduction & Vision 
1.1. Project Overview: 
●  What is "Empathy Hub"? Empathy Hub is envisioned as a mobile and web 
application dedicated to providing a safe, anonymous, and supportive space for 
individuals seeking empathetic connections and a place to share their feelings 
without judgment. It aims to build upon the core ideas of peer support platforms 
like the original "Friend Shoulder" concept, while addressing and improving upon 
potential shortcomings to create a more robust and user-centered experience. At 
its heart, Empathy Hub will serve as a central point—a hub—for users, particularly 
those who may face challenges with social interaction, to find understanding 
listeners, an AI companion for immediate support, and a community space to 
share and connect through topic-based threads. 
●  What problem is it solving? 
○  Loneliness and Isolation: In an increasingly disconnected world, many 
people experience profound feelings of loneliness and lack a sense of 
belonging or immediate outlet for their feelings. 
○  Lack of Non-Judgmental Spaces: Individuals often fear judgment, 
misunderstanding, or unsolicited advice when sharing vulnerable feelings with 
existing social circles, leading them to suppress their emotions. 
○  Difficulty Finding Empathetic Listeners: It can be challenging to find 
someone who is willing and able to listen empathetically without interjecting 
their own experiences or downplaying the user's feelings. 
○  Desire for Broader Connection & Shared Experiences: Beyond 
one-on-one chats, users may wish to share experiences or seek perspectives 
from a wider community focused on specific topics, learning from others who 
have gone through similar situations. 
○  Fear of Burdening Friends/Family: People may hesitate to share their 
struggles with their existing social circles for fear of being a burden, straining 
relationships, or facing repercussions. 
○  Need for Immediate, Accessible Support: Emotional needs can arise at any 
time, and traditional support systems (friends, family, professional help) may 
not be immediately available or accessible. 
○  Stigma Around Mental Health & Emotional Expression: The stigma 
associated with mental health struggles and open emotional expression can 
prevent individuals from seeking help or discussing their feelings openly. 
○  Social Anxiety and Communication Barriers: For those with social anxiety, 
introversion, or communication difficulties, anonymous, text-based platforms 
offer a lower-barrier entry point for connection and expression. 
●  Who is it for? 
○  Individuals aged 18+ (initially, to manage complexity and safety guidelines) 
experiencing feelings of loneliness, stress, anxiety, sadness, or simply needing 
a safe space to talk and be heard. 
○  People seeking an anonymous and non-judgmental environment to share their 
thoughts, feelings, and experiences. 
○  Those who wish to connect with a broader community around shared 
experiences or specific topics (e.g., coping with stress, navigating life 
changes, hobbies for well-being) in a supportive setting. 
○  Individuals who may not have immediate access to traditional support 
networks or prefer an alternative or supplement to them. 
○  People who find it difficult to open up to friends, family, or professionals due 
to fear of judgment, cost, or accessibility. 
○  Users who are comfortable with or prefer text-based communication for 
expressing themselves and connecting with others. 
○  Individuals who value empathetic listening and connection with peers who 
may have similar experiences or can offer a fresh perspective. 
○  Those who could benefit from an AI companion for initial support, when a 
human listener isn't available, or for practicing self-expression. 
○  This primarily includes, but is not limited to, young adults (18-35) and adults 
who are digitally native and looking for accessible emotional support tools 
available on both mobile and web platforms. 
1.2. Core Mission & Values: 
●  Ultimate Goal: To reduce feelings of isolation and provide an accessible, 
immediate, and safe digital space where individuals can find empathetic support, 
share their experiences, and foster a sense of community and mutual 
understanding, ultimately contributing positively to their emotional well-being. 
●  Guiding Principles: 
○  Safety First: Prioritizing user safety through robust, AI-assisted moderation, 
clear community guidelines, easy-to-use reporting/blocking tools, and 
features that protect user anonymity and data. 
○  Anonymity & Privacy: Ensuring users can express themselves freely without 
fear of personal identification or judgment from the outside world. Data 
privacy is paramount. 
○  Empathetic Support: Providing tools and fostering connections that offer 
genuine emotional support, active listening, and validation. 
○  Empathy as a Foundation: Cultivating an environment of understanding, 
compassion, and shared human experience, both in peer interactions and AI 
responses. 
○  Community & Connection: Building a space where users can connect over 
shared experiences, offer mutual support, and feel a sense of belonging. 
○  User Control & Agency: Giving users significant control over their 
experience, especially their interaction preferences (chat availability), data, 
and how they engage with the platform. 
○  Accessibility & Inclusivity: Designing the app to be usable by as many 
people as possible, across different devices (mobile/web) and considering 
users with varying needs. 
○  Simplicity & Ease of Use: Keeping the interface intuitive and straightforward, 
especially for users who may be feeling overwhelmed or are new to such 
platforms. 
○  Non-Professional Support: Clearly communicating that the platform offers 
peer support and AI companionship, not professional therapy or crisis 
intervention, and providing resources for professional help where appropriate. 
○  Continuous Improvement: Committing to listen to user feedback and 
iteratively improve the platform's features, safety measures, and overall 
experience. 
1.3. Unique Selling Proposition (USP): (As previously defined and detailed) 
1.4. Success Metrics (Initial Thoughts): (As previously defined and detailed, with 
the addition of web analytics for DAU/MAU, session duration, etc., and 
platform-specific adoption rates) 
2. Target Audience 
2.1. Primary User Persona(s): 
●  Persona 1: "Alex, 22, University Student Feeling Overwhelmed" 
○  Demographics: 22 years old, university student, living away from home, 
active on social media but feels a disconnect. 
○  Psychographics: Introverted, sometimes struggles with social anxiety, values 
deep connections but finds them hard to make. Worries about exams, future 
career, and maintaining friendships. Tech-savvy. 
○  Needs: 
■  A safe, anonymous place to vent about academic stress, social pressures, 
and feelings of loneliness without judgment. 
■  To connect with others who understand what they're going through. 
■  Immediate support when feeling particularly anxious or down, especially 
late at night. 
■  Control over who they interact with. 
○  Pain Points: 
■  Doesn't want to burden existing friends or family with their "complaining." 
■  Finds it hard to initiate conversations about their feelings in person. 
■  Worries about privacy on mainstream social media. 
■  Has tried other platforms but found them either too superficial or poorly 
moderated. 
○  How Empathy Hub Helps: Alex can use the "Open Chat" to find an 
immediate random listener, use "Request Only" when feeling more cautious, 
engage with the AI companion for quick grounding, or browse/post in 
"Student Life" or "Stress & Anxiety" community threads to share experiences 
and find solidarity. 
●  Persona 2: "Sam, 35, Remote Worker Experiencing Isolation" 
○  Demographics: 35 years old, works remotely in a tech field, lives alone or 
with a partner but misses daily social interaction of an office. 
○  Psychographics: Generally independent, but prolonged remote work has led 
to feelings of detachment. Enjoys focused work but struggles with the lack of 
casual social outlets. Values meaningful conversation. 
○  Needs: 
■  A way to connect with others on a human level outside of work. 
■  A space to discuss feelings of isolation or the challenges of remote work 
without it impacting their professional image. 
■  Opportunities for asynchronous connection (community threads) as well 
as real-time chat. 
○  Pain Points: 
■  Video call fatigue; prefers text-based interaction for personal sharing. 
■  Local social options are limited or don't fit their schedule. 
■  Feels like their "problems" aren't serious enough for professional help but 
still impact their well-being. 
○  How Empathy Hub Helps: Sam can participate in "Remote Work Life" or 
"Hobbies & Well-being" community threads, offering support to others and 
sharing their own experiences. They might use the user-to-user chat during a 
quiet evening or interact with the AI for a moment of reflection. 
2.2. User Stories (Key Examples for MVP): (As previously defined and detailed) 
■  Pros: Cheap and fast to implement. 
■  Cons: Very limited, easily bypassed, high false positives/negatives. 
■  MVP Decision: A combination: Start with Keyword Lists + Basic Rules for 
immediate, obvious violations, augmented by a Specialized Moderation 
API like Perspective API for more nuanced checks. User flagging 
remains crucial. 
○  How it will be integrated: Backend service that takes user-generated text 
(chat, posts, comments), passes it to the moderation service(s). Can be 
real-time blocking for severe violations or flagging for human review for 
others. 
4.4. Hosting & Infrastructure: 
●  Backend Hosting: 
○  Option 1 (PaaS): Google Cloud Run, AWS App Runner, Heroku. 
■  Pros: Easier deployment, auto-scaling, managed infrastructure. 
■  Cons: Can be more expensive at scale, less control. 
○  Option 2 (IaaS/Containers): AWS EC2/ECS/EKS, Google Kubernetes Engine 
(GKE), DigitalOcean Droplets with Docker. 
■  Pros: More control, potentially cheaper at scale. 
■  Cons: More operational overhead. 
○  MVP Decision: Google Cloud Run or AWS App Runner for ease of 
deployment and scaling with FastAPI. 
●  Database Hosting: 
○  PostgreSQL: Google Cloud SQL for PostgreSQL, AWS RDS for PostgreSQL, 
ElephantSQL (Heroku add-on or standalone). 
○  MongoDB: MongoDB Atlas. 
○  MVP Decision: Managed service corresponding to backend host, e.g., Google 
Cloud SQL if using Google Cloud Run. 
●  AI Model Hosting (if applicable for open-source self-hosted): AWS 
SageMaker, Google AI Platform, or dedicated GPU servers. (Not for MVP if using 
external APIs). 
●  App Distribution: (As previously defined) 
●  Web App Hosting: Firebase Hosting (integrates well with Flutter web, offers CDN, 
SSL), Netlify, Vercel. 
○  MVP Decision: Firebase Hosting for simplicity and good Flutter web support. 
5. Architecture 
5.1. Frontend Architecture (Flutter for Mobile & Web): 
●  Directory Structure: Feature-first approach. 
├── api/ 
│   ├── v1/ 
│   │   ├── endpoints/ (Routers for each feature: users.py, chat.py, threads.py, 
ai.py) 
│   │   └── deps.py (Dependencies for injection) 
├── core/ 
│   ├── config.py (Settings management) 
│   └── security.py (Token handling, password hashing if ever needed) 
├── db/ 
│   ├── session.py (Database session management) 
│   └── models/ (SQLAlchemy models or Pydantic models for NoSQL) 
├── schemas/ (Pydantic schemas for request/response validation) 
├── services/ (Business logic: user_service.py, chat_service.py, 
thread_service.py, ai_service.py, moderation_service.py) 
├── crud/ (Database interaction logic: crud_user.py, crud_post.py) 
└── ws/ (WebSocket connection managers and logic)   
●  Data Flow: 
1.  Client (Flutter app) sends HTTP/WebSocket request to FastAPI backend. 
2.  FastAPI router directs request to the appropriate endpoint function. 
3.  Endpoint function uses Pydantic schemas to validate request data. 
4.  Dependencies (e.g., database session, current user) are injected. 
5.  Endpoint calls relevant service function(s) in the services/ layer. 
6.  Service function implements business logic, calls CRUD functions for 
database operations, and interacts with external AI services (companion, 
moderation). 
7.  CRUD functions interact with the database via ORM/driver. 
8.  Service function returns results to the endpoint. 
9.  Endpoint uses Pydantic schemas to serialize response data and sends it back 
to the client. 
10. For WebSockets, connection manager handles message routing between 
clients or to/from AI services. 
5.3. Real-time Chat Architecture: (As previously defined and detailed) 
5.4. AI Integration Architecture: (As previously defined and detailed) 
6. Data Management 
6.1. Database Schema (High-Level): (As previously defined and detailed, ensuring 
datatypes are appropriate for chosen DB, e.g., VARCHAR vs TEXT, TIMESTAMPTZ 
for PostgreSQL) 
6.2. Data Privacy & Security: (As previously defined and detailed) 
6.3. Data Backup & Recovery: 
●  Automated Backups: Configure daily automated backups for the production 
database via the managed database service (e.g., AWS RDS snapshots, Google 
Cloud SQL automated backups). 
●  Backup Retention Policy: Define how long backups are kept (e.g., 7-30 days for 
regular backups, longer for monthly/yearly if needed for compliance). 
●  Point-in-Time Recovery (PITR): Enable PITR if supported by the database 
service, allowing restoration to any point within the backup retention window. 
●  Regular Backup Testing: Periodically test the backup restoration process to a 
staging environment to ensure backups are valid and recovery procedures work. 
●  Off-site Backups (Optional for extreme DR): Consider storing critical backups 
in a different geographic region if business continuity requires it. 
●  Data Deletion Policy: Clearly define how user data (chats, posts) is handled 
upon account deletion request, ensuring it's properly removed or anonymized 
from backups over time according to the retention policy. 
7. User Interface / User Experience (UI/UX) Considerations 
7.1. Core Design Principles: 
●  Simplicity & Intuitiveness: Clean, uncluttered interface. Easy-to-understand 
navigation, especially for users in distress. Clear calls to action. Minimal cognitive 
load. 
●  Safety & Trust: UI elements should visually reinforce the sense of a safe and 
private space. Clear reporting mechanisms, easily accessible community 
guidelines, and privacy settings. 
●  Empathy & Warmth: Visual design (colors, typography, imagery if any) and 
language should be warm, welcoming, calming, and non-judgmental. Avoid overly 
clinical or corporate aesthetics. 
●  Clear User Control: Users should easily understand and manage their chat 
availability, notification preferences, and other settings. Explicit opt-in for features 
like the "wants to chat list." 
●  Clear Navigation & Information Architecture: Easy to switch between the main 
features (Chat, AI Companion, Community Threads). Consistent layout patterns. 
●  Feedback & Responsiveness: The app should provide immediate feedback for 
user actions (e.g., message sent, loading states, errors). 
●  Focus on Content: For threads and chat, the content shared by users should be 
the primary focus, with minimal distracting UI elements. 
●  Gentle Onboarding: Introduce users to features and settings gradually, 
explaining the purpose of anonymity and safety measures. 
7.2. Wireframes/Mockups (Initial Sketches or Links): (As previously defined and 
detailed) 
7.3. User Flow Diagrams (Key Flows): (As previously defined and detailed) 
7.4. Accessibility Considerations: (As previously defined and detailed for mobile 
and web) 
8. Development Roadmap & Sprints (High-Level for MVP) 
(Detailed tasks within each sprint) 
●  Sprint 0: Setup & Foundation (1 week) 
○  Project Management: Setup task board (Jira, Trello, GitHub Projects). Define 
sprint length. 
○  Version Control: Initialize Git repositories (frontend, backend). Establish 
branching strategy (e.g., Gitflow). 
○  Environment Setup: Local development environment setup for all team 
members (Flutter, Dart, Python, Docker). 
○  Frontend (Flutter): Initialize Flutter project. Choose and integrate state 
management (Riverpod/BLoC). Setup basic project structure, linter. Initial UI 
shells/skeletons for core screens (login/auth, main nav, chat, AI, basic thread 
list, settings) considering responsive breakpoints for web. 
○  Backend (Python/FastAPI): Initialize FastAPI project. Setup basic project 
structure, linter. Dockerize backend application. 
○  Database: Design initial database schema (v1). Setup local development 
database. 
○  CI/CD (Basic): Setup basic CI pipeline (e.g., GitHub Actions) for running 
linters and tests on push. 
○  Documentation: Initial setup for API documentation (e.g., FastAPI's automatic 
Swagger/ReDoc). 
●  Sprint 1: Core Chat Functionality & User States (2-3 weeks) 
○  User Auth (Backend): Implement anonymous user creation endpoint. 
Implement token generation (JWT) and validation. 
○  User Auth (Frontend): Implement anonymous ID generation/retrieval, secure 
token storage. API integration for anonymous login. 
○  Chat Availability (Backend): API endpoints to set/get user chat availability 
status. Logic to manage the "wants to chat list." 
○  Chat Availability (Frontend): UI for users to set chat availability ("Blocked," 
"Request Only," "Open Chat"). Display current status. 
○  Random Matching (Backend): Algorithm to match users from the "wants to 
chat list." 
○  Random Matching (Frontend): "Find Chat Partner" button and UI flow. 
○  Chat Requests (Backend): Endpoints for sending, receiving, accepting, 
declining chat requests. 
○  Chat Requests (Frontend): UI for sending requests, receiving notifications, 
and accepting/declining. 
○  Real-time Messaging (Backend): WebSocket setup for basic 1-to-1 text 
message exchange. Message persistence. 
○  Real-time Messaging (Frontend): WebSocket connection. Basic chat UI for 
sending/receiving messages. 
○  Reporting/Blocking (Backend - Basic): Endpoints to report/block a user 
within a chat. 
○  Reporting/Blocking (Frontend - Basic): UI elements for reporting/blocking 
in chat. 
○  Unit & Integration Tests for all new backend and frontend logic. 
●  Sprint 2: AI Companion (Basic) Integration (1-2 weeks) 
○  AI Service Integration (Backend): Integrate with chosen AI LLM API (e.g., 
Gemini, OpenAI). Service to handle prompt construction and API calls. 
○  AI Chat Endpoint (Backend): API/WebSocket endpoint for AI companion 
messages. 
○  AI Chat UI (Frontend): Dedicated chat interface for AI companion. 
○  AI Message Flow (Frontend/Backend): Send user messages to backend, 
relay to AI, display AI response. 
○  Basic Empathetic Persona Prompting for the AI. 
○  Unit & Integration Tests for AI integration. 
●  Sprint 3: Community Threads - Backend & Basic Frontend (2 weeks) 
○  Threads CRUD (Backend): API endpoints for creating, reading (listing with 
basic pagination, getting single post), updating (own posts), deleting (own 
posts) community threads/posts. 
○  Comments CRUD (Backend): API endpoints for creating, reading comments 
for a post. 
○  Topic Management (Backend): Mechanism for admin to define topics. API 
endpoint to list topics. 
○  Post Creation (Frontend): UI for creating a new post (large text input, min 
char count, topic selection from predefined list). 
