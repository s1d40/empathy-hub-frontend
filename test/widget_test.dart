// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:empathy_hub_app/core/services/auth_api_service.dart';
import 'package:empathy_hub_app/features/auth/presentation/auth_cubit.dart';
import 'package:empathy_hub_app/features/auth/presentation/pages/username_selection_page.dart';
import 'package:empathy_hub_app/features/auth/presentation/widgets/auth_gate.dart';
import 'package:empathy_hub_app/features/feed/presentation/widgets/feed_widget.dart';
import 'package:empathy_hub_app/features/home/presentation/pages/home_page.dart';
import 'package:empathy_hub_app/features/navigation/presentation/pages/main_navigation_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  late AuthApiService realApiService;
  late AuthCubit authCubit;

  setUpAll(() {
    // This ensures that HttpOverrides are set before any HTTP client is created.
    // Important for widget tests making real HTTP calls if there are SSL issues with localhost,
    // though typically not needed for http://localhost.
    // HttpOverrides.global = null; // Or your custom override if needed
  });

  setUp(() {
    SharedPreferences.setMockInitialValues({});
    realApiService = AuthApiService(); // Use the real ApiService
    authCubit = AuthCubit(realApiService);
  });

  tearDown(() {
    authCubit.close();
  });

  testWidgets('App integration flow: Unauthenticated -> UsernameSelection -> Authenticated -> HomePage', (WidgetTester tester) async {
    // Build the AuthGate with the real AuthCubit (which uses the real ApiService)
    await tester.pumpWidget(
      MaterialApp(
        home: BlocProvider<AuthCubit>.value(
          value: authCubit,
          child: const AuthGate(),
        ),
      ),
    );

    // 1. Initial state: AuthLoading


    // 2. Settle to Unauthenticated state, showing UsernameSelectionPage
    await tester.pumpAndSettle();
    expect(find.byType(UsernameSelectionPage), findsOneWidget);
    expect(find.text('Welcome to Empathy Hub'), findsOneWidget);

    // 3. Interact with UsernameSelectionPage: Enter a username and tap "Continue Anonymously"
    const testUsername = 'IntegrationTester';
    await tester.enterText(find.byType(TextFormField), testUsername);
    final continueButton = find.widgetWithText(ElevatedButton, 'Continue Anonymously');
    expect(continueButton, findsOneWidget);
    await tester.tap(continueButton);
    await tester.pump(); // Start the signInAnonymously process (emits AuthLoading)

    // 5. Settle to Authenticated state, showing MainNavigationPage (which shows HomePage)
    // This will take longer as it's making real network calls.
    // You might need to increase the timeout for pumpAndSettle if it's too short.
    await tester.pumpAndSettle(const Duration(seconds: 5)); // Allow time for network
    
    expect(find.byType(MainNavigationPage), findsOneWidget);
    expect(find.byType(HomePage), findsOneWidget);
    expect(find.byType(FeedWidget), findsOneWidget);
    // Verify the username displayed is the one we entered (or one generated by backend if logic changes)
    expect(find.text('Empathy Hub Feed - $testUsername'), findsOneWidget);
  });
}
